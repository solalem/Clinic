@page "/Appointments/Visits/new"
@using Clinic.Core.Appointments.Services
@using Clinic.ViewModels;
@inject ILogger<Create> Logger
@inject IJSRuntime JSRuntime

@inherits Clinic.Web.Models.BlazorPage

@namespace Clinic.Core.Appointments.Pages.Visits
@using Clinic.ViewModels.Appointments
@using Clinic.ViewModels.Appointments.Patients;

<div class="sticky-top">
    <Bar Breakpoint="Breakpoint.Desktop" Background="Background.White" ThemeContrast="ThemeContrast.Light" Shadow="Shadow.Remove">
        <BarToggler />
        <BarMenu>
            <BarStart>
                <BarItem>
                    <Button Type="ButtonType.Submit" Shadow="Shadow.Remove" form="createForm">Create</Button>
                </BarItem>
            </BarStart>
            <BarEnd>
                <BarItem>
                    <Button Type="ButtonType.Submit" Shadow="Shadow.Remove" Clicked="() => NavigationManager.NavigateTo(_pageState.PreviousPage())">
                        <Icon Name="IconName.Times"></Icon>
                    </Button>
                </BarItem>
            </BarEnd>
        </BarMenu>
    </Bar>
</div>

@if (Item == null)
{
    <Spinner></Spinner>
}
else
{
<Container>
    <Row>
        <Column ColumnSize="ColumnSize.Is8">

            <EditForm Model="Item" OnValidSubmit="@CreateClick" id="createForm">
                <DataAnnotationsValidator />
                    <div class="container">
                        <br/>

                    <Field>
                        <FieldLabel>Date:</FieldLabel>
                        <DatePicker DateChanged="((x) => Item.Date = x)" TValue="DateTimeOffset" Date="Item.Date" />
                        <ValidationMessage For="(() => Item.Date)" />
                    </Field>
                        @if (!RoutedPatientId.HasValue) 
                        {
                    <Field>
                        <FieldLabel>Patient:</FieldLabel>
                        <Autocomplete TItem="PatientSummary"
                            TValue="Guid"                        
                            Data="@PatientOptions.Items"
                            TextField="@((i)=>i.FullName)"
                            ValueField="@((i)=>i.Id)"
                            @bind-SelectedValue="@Item.PatientId"
                            SearchChanged="(s) => LoadPatientOptions(new PaginationInfo { IsSearch = true, SearchString = s })"
                            Placeholder="Search Patient..." />
                        <ValidationMessage For="(() => Item.PatientId)" />
                    </Field>
                        }

                    <Field>
                        <FieldLabel>Physician:</FieldLabel>
                        <TextEdit @bind-Text="@Item.Physician" />
                        <ValidationMessage For="(() => Item.Physician)" />
                    </Field>

                    <Field>
                        <FieldLabel>Description:</FieldLabel>
                        <TextEdit @bind-Text="@Item.Description" />
                        <ValidationMessage For="(() => Item.Description)" />
                    </Field>
                </div>
            </EditForm>
        </Column>
        <Column ColumnSize="ColumnSize.Is4">
            <Card>
                <CardHeader>
                    <CardTitle>Help</CardTitle>
                </CardHeader>
                <CardBody>
                    No help available.
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>
}
