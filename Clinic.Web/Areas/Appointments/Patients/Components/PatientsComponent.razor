@*@attribute [Authorize(Roles = Clinic.Web.Shared.Authorization.Constants.Roles.ADMINISTRATORS)]*@
@inherits Clinic.Web.Helpers.BlazorComponent
@namespace Clinic.Web.Areas.Appointments.Patients.Components
@using Clinic.ViewModels
@using Clinic.ViewModels.Appointments
@using Blazorise;
@using Clinic.ViewModels.Appointments.Patients;

@ChildContent

@if (Patients.Items == null || Patients.Items.Count() == 0)
{
    <br />
    <div class="offset-md-2 col-md-8 card">
        <p class="card-header">No Patients</p>
    </div>
    return;
}

@if (IsList)
{
    <ul class="pl-1 list-unstyled">
        @foreach (var item in Patients.Items)
        {
            if (item == null) continue;
            var highlight = (selectedItem == item) ? "bg-white": "";
            <li @key="item.Id" class="p-2 list-group-item-action @highlight" @onclick="@(() => SelectClick(item))">
                <div class="d-flex w-100 justify-content-between">
                    <span>@item.DisplayName</span>
                    <small class="text-info">@item.More</small>
                </div>
                <small class="text-muted">@item.DisplayDescription</small>
                @if (Editable) 
                {
                    <button type="button" class="close" aria-label="Close" @onclick="() => RemoveClick(item)" @onclick:stopPropagation="true">
                        <span aria-hidden="true">&times;</span>
                    </button>
                }
            </li>
        }
    </ul>
}
else
{
    <table class="table table-sm table-hover">
        <thead>
            <tr>
                <th>@nameof(PatientSummary.CardNumber)</th>
                <th>@nameof(PatientSummary.FullName)</th>
                <th>@nameof(PatientSummary.Gender)</th>
                <th>@nameof(PatientSummary.PhoneNumber)</th>
                <th>@nameof(PatientSummary.DateOfBirth)</th>
                <th>@nameof(PatientSummary.Email)</th>
                @if (Editable) 
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody class="cursor-pointer">
            @foreach (var item in Patients.Items)
            {
                if (item == null) continue;
                <tr @key="item.Id" @onclick="@(() => SelectClick(item))">
                    <td>@item.CardNumber</td>
                    <td>@item.FullName</td>
                    <td>@item.Gender</td>
                    <td>@item.PhoneNumber</td>
                    <td>@item.DateOfBirth</td>
                    <td>@item.Email</td>
                    @if (Editable) 
                    {
                        <td>
                            <button type="button" class="close" aria-label="Close" @onclick="() => RemoveClick(item)" @onclick:stopPropagation="true">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code{
    PatientSummary selectedItem;
    [Parameter]
    public Guid ParentId { get; set; }
    [Parameter]
    public PatientList Patients { get; set; }
    [Parameter]
    public bool Editable { get; set; } = true;
    [Parameter]
    public bool IsList { get; set; } = true;
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<PatientSummary> OnSelectClick { get; set; }
    [Parameter]
    public EventCallback<PatientSummary> OnRemoveClick { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CallRequestRefresh();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task SelectClick(PatientSummary item)
    {
        selectedItem = item;
        await OnSelectClick.InvokeAsync(item);
    }
    void RemoveClick(PatientSummary item)
    {
        OnRemoveClick.InvokeAsync(item);
    }

}
